<?xml version="1.0" encoding="UTF-8"?>

<?import java.lang.String?>
<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.Separator?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.Pane?>
<?import javafx.scene.text.Font?>
<?import javafx.scene.text.Text?>

<AnchorPane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="700.0" prefWidth="650.0" stylesheets="@lightmode.css" xmlns="http://javafx.com/javafx/19" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.example.programmingproject.gui.controllers.MenuController">
   <children>
      <Pane prefHeight="110.0" prefWidth="650.0" styleClass="secondary-color" stylesheets="@lightmode.css">
         <children>
            <Label layoutX="283.0" layoutY="23.0" text="Rules">
               <font>
                  <Font size="36.0" />
               </font>
            </Label>
            <Button fx:id="back" layoutX="45.0" layoutY="35.0" mnemonicParsing="false" onAction="#switchToMenuBack" styleClass="back-button" stylesheets="@lightmode.css" text="Back">
               <font>
                  <Font size="18.0" />
               </font>
            </Button>
         </children></Pane>
      <Text layoutX="25.0" layoutY="138.0" strokeType="OUTSIDE" strokeWidth="0.0" text="To play Sudoku, the player only needs to be familiar with the numbers from 1 to 9 and be able to think logically. The goal of this game is clear: to fill and complete the grid using the numbers from 1 to 9. The challenging part lays on the restrictions imposed on the player to be able to fill the grid." wrappingWidth="600.0">
         <font>
            <Font size="14.0" />
         </font>
      </Text>
      <Separator layoutX="25.0" layoutY="210.0" prefWidth="600.0" />
      <Text layoutX="25.0" layoutY="244.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Rule 1 - Each row must contain the numbers from 1 to 9, without repetitions.The player must focus on filling each row of the grid while ensuring there are no duplicated numbers. The placement order of the digits is irrelevant. Every puzzle, regardless of the difficulty level, begins with allocated numbers on the grid. The player should use these numbers as clues to find which digits are missing in each row." wrappingWidth="600.0">
         <font>
            <Font size="14.0" />
         </font>
      </Text>
      <Text layoutX="25.0" layoutY="357.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Rule 2 - Each column must contain the numbers from 1 to 9, without repetitionsThe Sudoku rules for the columns on the grid are exactly the same as for the rows. The player must also fill these with the numbers from 1 to 9, making sure each digit occurs only once per column. The numbers allocated at the beginning of the puzzle work as clues to find which digits are missing in each column and their position." wrappingWidth="600.0">
         <font>
            <Font size="14.0" />
         </font>
      </Text>
      <Text layoutX="25.0" layoutY="469.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Rule 3 - The digits can only occur once per block (nonet)A regular 9 x 9 grid is divided into 9 smaller blocks of 3 x 3, also known as nonets. The numbers from 1 to 9 can only occur once per nonet. In practice, this means that the process of filling the rows and columns without duplicated digits finds insideeach block another restriction to the numbersâ€™ positioning." wrappingWidth="600.0">
         <font>
            <Font size="14.0" />
         </font>
      </Text>
      <Text layoutX="25.0" layoutY="573.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Rule 4 - The sum of every single row, column and nonet must equal 45To find out which numbers are missing from each row, column or block or if there are any duplicates, the player can simply count or flex their math skills and sum the numbers. When the digits occur only once, the total of each row, column and group must be of 45.1+2+3+4+5+6+7+8+9= 45" wrappingWidth="600.0">
         <font>
            <Font size="14.0" />
         </font>
      </Text>
   </children>
   <styleClass>
      <String fx:value="primary-color" />
      <String fx:value="text-area" />
   </styleClass>
</AnchorPane>
